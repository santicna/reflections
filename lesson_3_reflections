When would you want to use a remote repository rather than keeping all your work local?

Anytime I need to work with any other person, or am changing computers (I.E. home and work).
A remote repository makes it much easier to fetch the data from one place.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because there might be unwanted changes made in the remote that you don't want in your local.
By always pulling manually you also make sure of what you're adding to the local from Github.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forking is a Github feature which lets you copy another repository on your account.
You'll want to use this if you don't want or can't make changes to the original repository.
Cloning makes a local copy of a github repository or another local file, to work on your computer.
You'll want to use this to start mos of your work.
Branching creates a new branch of commits in your repository.
You'll want to use this option when implementing a new feature or making changes to a rapository
that could interfere with the quality of the master branch.

What is the benefit of having a copy of the last known state of the remote stored locally?

You know where you started from and from where the changes came from. You also know the
common ancestor when merging files.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git and Github I just think everything would be harder, as they are tools to facilitate a lot
of things. From version control to sharing to collaborating, those tools exist in order to help the flow
of work, so without them everything, while still possible, would be much harder.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When working in a group it is wise not no make changes directly in master and do them in a separate branch. This way
you can create a pull request to merge into master so that the change can be reviewed before merging, double checking for
mistakes or differences.
This procces makes everything a little bit slower, but much safer.